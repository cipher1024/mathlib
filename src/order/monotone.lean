/-
Copyright (c) 2019 Simon Hudon. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author(s): Simon Hudon

Bundled monotone functions
-/

import order.basic

section is_monotone_def

variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*} {œâ : Type*}

variables [preorder Œ±] [preorder Œ≤] [preorder Œ≥] [preorder œâ]

class is_monotone (f : Œ± ‚Üí Œ≤) : Prop :=
(mono' : monotone f)

lemma is_monotone.mono {f : Œ± ‚Üí Œ≤} (hf : is_monotone f) : monotone f :=
is_monotone.mono' f

end is_monotone_def

namespace is_monotone

open function

variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*} {œâ : Type*}

variables [preorder Œ±] [preorder Œ≤] [preorder Œ≥] [preorder œâ]

variables (f : Œ± ‚Üí Œ≤ ‚Üí Œ≥)

@[instance]
lemma monotone_uncurry
  [h‚ÇÄ : is_monotone f] [h‚ÇÅ : monotone $ flip f] :
  is_monotone (uncurry f) :=
‚ü® Œª ‚ü®a,a'‚ü© ‚ü®b,b'‚ü© h,
  show f a a' ‚â§ f b b', from
    le_trans
      (show f a a' ‚â§ f b a', from is_monotone.mono h‚ÇÄ h.1 _ )
      (show f b a' ‚â§ f b b', from h‚ÇÅ h.2 _)
‚ü©
variables {f} [hf : is_monotone (uncurry f)]

-- @[instance]
-- lemma monotone_uncurry_comp {g : œâ ‚Üí Œ±}
--   [hg : is_monotone g] :
--   is_monotone (uncurry (f ‚àò g)) :=
-- ‚ü® Œª ‚ü®a,a'‚ü© ‚ü®b,b'‚ü© h, @is_monotone.mono _ _ _ _ _ hf (g a, a') (g b, b') ‚ü®is_monotone.mono hg h.1,h.2‚ü© ‚ü©

-- @[instance]
-- lemma monotone_uncurry_comp' {g : Œ± ‚Üí œâ ‚Üí Œ≤}
--   [hg : is_monotone (uncurry g)] :
--   is_monotone (uncurry (Œª x, f x ‚àò g x)) :=
-- Œª ‚ü®a,a'‚ü© ‚ü®b,b'‚ü© h, @hf (_, _) (_, _) ‚ü®h.1,@hg (a,a') (b,b') h‚ü©

-- @[instance]
-- lemma monotone_of_monotone_uncurry : is_monotone f :=
-- Œª a b h x, @hf (a,x) (b,x) ‚ü®h,le_refl _‚ü©

-- @[instance]
-- lemma monotone_of_monotone_uncurry' : ‚àÄ x, is_monotone (f x) :=
-- Œª x a b h, @hf (x,a) (x,b) ‚ü®le_refl _,h‚ü©

-- @[instance]
-- lemma monotone_flip_of_monotone_uncurry : is_monotone (flip f) :=
-- Œª a b h x, @hf (x,a) (x,b) ‚ü®le_refl _,h‚ü©

-- @[instance]
-- lemma monotone_flip_of_monotone_uncurry' : ‚àÄ x, is_monotone (flip f x) :=
-- Œª x a b h, @hf (a,x) (b,x) ‚ü®h,le_refl _‚ü©

instance id : is_monotone $ @id Œ± :=
‚ü® monotone_id ‚ü©

instance const (x : Œ±) : is_monotone $ @const Œ± Œ≤ x :=
‚ü® monotone_const x ‚ü©

instance val {p : Œ± ‚Üí Prop} : is_monotone $ @subtype.val Œ± p :=
‚ü® subtype.monotone_val ‚ü©

instance fst : is_monotone $ @prod.fst Œ± Œ≤ :=
‚ü® prod.monotone_fst ‚ü©

instance snd : is_monotone $ @prod.snd Œ± Œ≤ :=
‚ü® prod.monotone_snd ‚ü©

end is_monotone

section Mono_def

variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*} {œâ : Type*}

variables [preorder Œ±] [preorder Œ≤] [preorder Œ≥] [preorder œâ]

variables (Œ± Œ≤)
-- variables (Œ± : Type*) (Œ≤ : Type*) (Œ≥ : Type*) [preorder Œ±] [preorder Œ≤] [preorder Œ≥]

structure Mono :=
mk' :: (F : Œ± ‚Üí Œ≤)
       [mono' : is_monotone F]

infixr ` ‚Üí‚Çò `:25 := Mono
-- infixr ` ‚Üíùî™ `:25 := Mono

instance : has_coe_to_fun (Œ± ‚Üí‚Çò Œ≤) :=
{ F := Œª _, Œ± ‚Üí Œ≤,
  coe := Mono.F }

instance is_monotone.coe (f : Œ± ‚Üí‚Çò Œ≤) : is_monotone f :=
f.mono'

end Mono_def

namespace Mono

variables {Œ± : Type*} {Œ≤ : Type*} {Œ≥ : Type*} {œâ : Type*}

variables [preorder Œ±] [preorder Œ≤] [preorder Œ≥] [preorder œâ]

variables {Œ± Œ≤ Œ≥}

def mk (f : Œ± ‚Üí Œ≤) (hf : monotone f) := @Mono.mk' Œ± Œ≤ _ _ f ‚ü®hf‚ü©

def mono (f : Œ± ‚Üí‚Çò Œ≤) : monotone f := f.mono'.mono

def val (p : Œ± ‚Üí Prop) : subtype p ‚Üí‚Çò Œ± := ‚ü®subtype.val‚ü©

lemma ext' : Œ† {x y : Œ± ‚Üí‚Çò Œ≤} (h : x.F = y.F), x = y
| (@Mono.mk' _ _ _ _  x _) (@Mono.mk' _ _ _ _  y _) :=

assume h : x = y, by congr; exact h

instance : preorder (Œ± ‚Üí‚Çò Œ≤) :=
{ le := Œª x y, x.F ‚â§ y.F,
  le_refl := Œª x, le_refl x,
  le_trans := Œª x y z, le_trans }

instance {Œ± Œ≤} [partial_order Œ±] [partial_order Œ≤] : partial_order (Œ± ‚Üí‚Çò Œ≤) :=
{ le_antisymm := Œª a b h h', ext' (le_antisymm h h'),
  .. Mono.preorder }

def comp (f : Œ≤ ‚Üí‚Çò Œ≥) (g : Œ± ‚Üí‚Çò Œ≤) : Œ± ‚Üí‚Çò Œ≥ :=
{ F := f ‚àò g, mono' := ‚ü® monotone_comp g.mono f.mono ‚ü© }

infixr ‚àò := comp

section

variables (Œ± Œ≤)
def FF : (Œ± ‚Üí‚Çò Œ≤) ‚Üí‚Çò (Œ± ‚Üí Œ≤) :=
Mono.mk Mono.F $ Œª x y h, h

end

def id : Œ± ‚Üí‚Çò Œ± :=
Mono.mk' id

def const (x : Œ±) : Œ≤ ‚Üí‚Çò Œ± :=
Mono.mk' (function.const _ x)

def split (f : Œ± √ó Œ± ‚Üí‚Çò Œ≤) : Œ± ‚Üí‚Çò Œ≤ :=
mk (Œª x, f (x, x)) $ Œª a b h, f.mono ‚ü®h,h‚ü©

def flip (f : Œ± √ó Œ≤ ‚Üí‚Çò Œ≥) : Œ≤ √ó Œ± ‚Üí‚Çò Œ≥ :=
mk (Œª x, f x.swap) (Œª a b h, f.mono ‚ü®h.2,h.1‚ü©)

def fst (f : Œ± √ó Œ≤ ‚Üí‚Çò Œ≥) : Œ≤ ‚Üí Œ± ‚Üí‚Çò Œ≥ :=
Œª x, mk (Œª y, f (y,x)) (Œª a b h, f.mono ‚ü®h,le_refl _‚ü©)

def fst' (f : Œ± √ó Œ≤ ‚Üí‚Çò Œ≥) : Œ± ‚Üí‚Çò Œ≤ ‚Üí Œ≥ :=
mk (Œª x y, f (x,y)) (Œª a b h z, f.mono ‚ü®h,le_refl _‚ü©)

def snd (f : Œ± √ó Œ≤ ‚Üí‚Çò Œ≥) : Œ± ‚Üí Œ≤ ‚Üí‚Çò Œ≥ :=
Œª x, mk (Œª y, f (x,y)) (Œª a b h, f.mono ‚ü®le_refl _,h‚ü©)

def snd' (f : Œ± √ó Œ≤ ‚Üí‚Çò Œ≥) : Œ≤ ‚Üí‚Çò Œ± ‚Üí Œ≥ :=
mk (Œª x y, f (y,x)) (Œª a b h z, f.mono ‚ü®le_refl _, h‚ü©)

def first (f : Œ± ‚Üí‚Çò Œ≥) : Œ± √ó Œ≤ ‚Üí‚Çò Œ≥ √ó Œ≤ :=
mk (prod.map f _root_.id) (Œª ‚ü®a,a'‚ü© ‚ü®b,b'‚ü© h, ‚ü®f.mono h.1,h.2‚ü©)

def ite (p : Prop) [decidable p] (f g : Œ± ‚Üí‚Çò Œ≤) : Œ± ‚Üí‚Çò Œ≤ :=
mk (Œª x, if p then f x else g x)
   (Œª a b h, by split_ifs; [exact f.mono h, exact g.mono h])

instance fst.is_monotone (f : Œ± √ó Œ≤ ‚Üí‚Çò Œ≥) : is_monotone f.fst :=
‚ü® Œª x y h a, f.mono ‚ü®le_refl _, h‚ü© ‚ü©

instance snd.is_monotone (f : Œ± √ó Œ≤ ‚Üí‚Çò Œ≥) : is_monotone f.snd :=
‚ü® Œª x y h a, f.mono ‚ü®h, le_refl _‚ü© ‚ü©

variables {f : Œ± ‚Üí‚Çò Œ≤} {g : Œ≤ ‚Üí‚Çò Œ≥}

@[simp]
lemma split_def (f : Œ± √ó Œ± ‚Üí‚Çò Œ≤) (x : Œ±) : split f x = f (x, x) := rfl

@[simp]
lemma fst_flip (f : Œ± √ó Œ≤ ‚Üí‚Çò Œ≥) (x : Œ±) : f.flip.fst x = f.snd x := rfl

@[simp]
lemma fst_flip' (f : Œ± √ó Œ≤ ‚Üí‚Çò Œ≥) : f.flip.fst' = f.snd' := rfl

@[simp]
lemma snd_flip (f : Œ± √ó Œ≤ ‚Üí‚Çò Œ≥) (x : Œ≤) : f.flip.snd x = f.fst x := rfl

@[simp]
lemma snd_flip' (f : Œ± √ó Œ≤ ‚Üí‚Çò Œ≥) : f.flip.snd' = f.fst' := rfl

@[simp]
lemma comp_def (x : Œ±) : (g ‚àò f : Œ± ‚Üí‚Çò Œ≥) x = g (f x) := rfl

@[simp]
lemma mk_coe_to_fun (f : Œ± ‚Üí‚Çò Œ≤) : (mk' f : Œ± ‚Üí‚Çò Œ≤) = f :=
by cases f; refl

@[simp]
lemma coe_to_fun_mk_def' (f : Œ± ‚Üí Œ≤) [is_monotone f] (x : Œ±) : (mk' f : Œ± ‚Üí‚Çò Œ≤) x = f x := rfl

@[simp]
lemma coe_to_fun_mk_def (f : Œ± ‚Üí Œ≤) (hf : monotone f) (x : Œ±) : (mk f hf) x = f x := rfl

section coe_to_fun_proj

variables {f' : Œ± √ó Œ≤ ‚Üí‚Çò Œ≥} {x : Œ±} {y : Œ≤}

lemma coe_to_fun_fst :  f'.fst y x  = f' (x, y) := rfl

lemma coe_to_fun_fst' : f'.fst' x y = f' (x, y) := rfl

lemma coe_to_fun_snd :  f'.snd x y  = f' (x, y) := rfl

lemma coe_to_fun_snd' : f'.snd' y x = f' (x, y) := rfl

lemma coe_to_fun_fst_swap : f'.fst y x = f'.fst' x y := rfl

lemma coe_to_fun_snd_swap : f'.snd x y = f'.snd' y x := rfl

lemma coe_to_fun_fst_eq_snd : f'.fst y x = f'.snd x y := rfl

lemma coe_to_fun_fst_eq_snd' : f'.fst' x y = f'.snd' y x := rfl

end coe_to_fun_proj

@[extensionality]
lemma ext {g : Œ± ‚Üí‚Çò Œ≤} (h : ‚àÄ x, f x = g x) : f = g :=
by { casesm* _ ‚Üí‚Çò _, suffices : f_F = g_F, subst this, ext, apply h }

namespace subtype

-- def val

end subtype


end Mono

namespace Mono

variables {Œ± : Type*} {Œ≤ : Œ± ‚Üí Type*} (Œ≥ : Œ† a, Œ≤ a ‚Üí Type*)
variables [Œ† a b, preorder $ Œ≥ a b]

def curry : (Œ† a : sigma Œ≤, Œ≥ a.1 a.2) ‚Üí‚Çò (Œ† a b, Œ≥ a b) := Mono.mk function.curry' (monotone_curry' _ _ _)
def uncurry : (Œ† a b, Œ≥ a b) ‚Üí‚Çò (Œ† a : sigma Œ≤, Œ≥ a.1 a.2) := Mono.mk function.uncurry' (monotone_uncurry' _ _ _)
open function (curry' uncurry')

@[simp] lemma coe_to_fun_curry (f : Œ† a : sigma Œ≤, Œ≥ a.1 a.2) : curry Œ≥ f = curry' f := rfl
@[simp] lemma coe_to_fun_uncurry (f : Œ† a b, Œ≥ a b) : uncurry Œ≥ f = uncurry' f := rfl

end Mono
